apply plugin: 'kotlin-multiplatform'

//plugins {
//    id 'kotlin-multiplatform' version '1.3.0-rc-57'
//}
repositories {
    mavenLocal()
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    jcenter()
    mavenCentral()
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        
        configure([jvm]) {
            [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)]*.kotlinOptions {
                //freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
                languageVersion = "1.3"
            }
        }

        configure([js]) {
            [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)]*.kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.26.1-eap13"

            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

dependencies {
    jvmTestImplementation gradleTestKit()
}

// JS TESTS

apply plugin: 'com.moowork.node'

afterEvaluate {
    task populateNodeModules(type: Copy, dependsOn: jsTestClasses) {
        //from "${buildDir}/classes/kotlin/js/main"
        //from "${buildDir}/classes/kotlin/js/test"
        from compileTestKotlinJs.kotlinOptions.outputFile
        from compileKotlinJs.kotlinOptions.outputFile

        configurations.jsTestCompileClasspath.each {
            from zipTree(it.absolutePath).matching { include '*.js' }
        }

        into "${buildDir}/node_modules"
    }

    task mochaInstall(type: NpmTask) {
        args = ['install', 'mocha', 'mocha-simple-html-reporter', 'mocha-multi-reporters', 'mocha-junit-reporter']
    }

    //mocha testfile.js --reporter mocha-simple-html-reporter --reporter-options output=report.html

    task mochaTest(type: NodeTask, dependsOn: [mochaInstall, populateNodeModules]) {
        def mochaMultiReportersConfigJsonFile = new File("$buildDir/mocha-multi-reporters-config.json")
        doFirst {
            // https://www.npmjs.com/package/mocha-multi-reporters
            new File("$buildDir/test-results/jsTest").mkdirs()
            mochaMultiReportersConfigJsonFile.write("""{
                "reporterEnabled": "dot,mocha-junit-reporter",
                "mochaJunitReporterReporterOptions": {
                    "testsuitesTitle": true,
                    "toConsole": false,
                    "suiteTitleSeparatedBy": ".",
                    "mochaFile": "$buildDir/test-results/jsTest/TEST-test.xml"
                }
            }""")
        }
        script = rootProject.file("$buildDir/../node_modules/mocha/bin/mocha")
        args = [compileTestKotlinJs.kotlinOptions.outputFile, "--reporter", "mocha-multi-reporters", "--reporter-options", "configFile=$mochaMultiReportersConfigJsonFile"]

        //println("mocha " + args.join(" "))
        execOverrides {
            it.workingDir = buildDir
        }
    }

    jsTest.finalizedBy(mochaTest)
    //jsTest.dependsOn(mochaTest)
}

//configurations.each { println(it) }
