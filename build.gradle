buildscript {
    ext.kotlin_version = '1.2.41'
    ext.web_dir = 'docs'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'io.ktor'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin2js'
apply plugin: 'idea'

sourceSets {
    main.kotlin.srcDirs += "src"
    main.resources.srcDirs += "resources"
    test.kotlin.srcDirs += "test"
}

compileKotlin2Js {
    kotlinOptions.outputFile = "${web_dir}/output.js"
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
}

compileTestKotlin2Js {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/js-externals" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "kotlin.js.externals:kotlin-js-jquery:3.2.0-0"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

clean.doFirst() {
    delete("${web_dir}")
}

task buildAndCopy(type: Copy, dependsOn: ['build']) {
    // Copy kotlin.js and kotlin-meta.js from jar into web directory
    configurations.compile.each { File file ->
        println(file.absolutePath)
        from(zipTree(file.absolutePath)) {
            exclude "**/*.meta.js", "**/*.kjsm"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    // Unpack build contents
    // TODO Remove this step when a CDN link is available.
    //File appJar = new File("${buildDir}/libs/${project.name}-${project.version}.jar")
    //println(appJar)
    //from(zipTree(appJar)) {
    //    exclude "**/*.meta.js", "**/*.kjsm"
    //    //include { fileTreeElement ->
    //    //    def path = fileTreeElement.path
    //    //    !(path.startsWith("META-INF/") || path.startsWith("${project.name}"))
    //    //}
    //}

    from(new File("${buildDir}/resources/main")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    // Copy scripts to web directory
    from(new File("${buildDir}/classes/main")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    from(new File("${buildDir}/classes/test")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    from(new File("${buildDir}/resources/test")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    includeEmptyDirs = false
    into "${projectDir}/${web_dir}"
}

build.doLast() {

}

idea {
    module {
        excludeDirs = [".gradle", ".idea", "build", "gradle", "docs", "resources/lib"].collect { new File(it) }
    }
}
